{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"docs/","text":"ChainAuth for Game Developers What is ChainAuth? ChainAuth provides a simplified solution to Game Developers for one of the many difficulties when developing a Web 3 standalone game : authenticating a player's non-custodial wallet to prove ownership of the tokens, NFTs, or other digital assets a player owns . Why is this a challenge? Players can own digital assets across a wide range of wallets (Metamask, Coinbase, Trust Wallet, etc.) on various different blockchains (ethereum, binance, polygon, etc.) and games should be flexible to support as many players as possible. One common workaround to this problem is to have the game (or typically a 3rd party service) manage the wallet on behalf of players, known as a custodial wallet. But this fundamentally looks no different from Web 2 and defeats the purpose of enabling players to have true ownership of their assets in the metaverse. The only secure way to prove that players own a given wallet is to ask them to sign a random message (nonce) with the wallet's private key and then cryptographically validate that the signature could only have been generated with the player's private key. However, without a backend solution, most wallets do not natively have a means to connect with other standalone applications. While some solutions exist if the game or app exists in a browser or for just mobile wallets using Wallet Connect, ChainAuth provides the APIs and SDKs necessary to validate your players' wallets whether they prefer using : - Mobile Wallet Apps i.e. Metamask Android or iOS - Web Browser Wallets i.e. Brave or Metamask - or Hardware Wallets i.e. Ledger or Trezor ChainAuth enables developers to either provide players a one time code for authentication or send them a magic link email to their players to start the authentication process. By going to https://link.fusedvr.com , players can input that code in the browser, which will request a signature from their web browser wallet, hardware wallet, or mobile wallet through Wallet Connect. Players will sign a randomly generated message (nonce), which is sent back to your game along with the validated wallet address. Once validated, you can now read the state of the blockchain to see what NFTs, tokens, and assets a player has on any chain associated with that address using the APIs provided. Why FusedVR ChainAuth The ChainAuth solution by FusedVR is designed by a developers to make it incredibly simple for developers to solve the authentication problem either using the Unity SDK or via our API integration. For indie developers working in Unity, the SDK integration is as simple as : Add the Web3 SDK to your project via the Package Manager Call the Register Function with a unique identified and your application id to get a manager instance Give code from the Register Function to the player in order to input on https://link.fusedvr.com Call the Login function in the SDK with that code and await the player's authorization signature Web3Manager manager = await Web3Manager.Register(\"unique id\", \"appId\"); Debug.Log(manager.RegisterCode); //auth code for player to input Debug.Log( await manager.GetMagicLink() ); //link version of code if (await manager.AwaitLogin()) { //await for player to login //your game logic here CallAPIs(manager, Web3Manager.CHAIN.eth); } Use Cases The ChainAuth solution provides an efficient solution for passwordless authentication of players, which enables use cases that require just reading the state of the blockchain once authenticated. Such use cases could include: Determining if a player owns digital assets associated with the game i.e. avatar skins, in game items, or tokens. Determining if a player owns an NFT the represents ownership of the game Whether or not a player has interacted with a custom smart contract and the events emitted as a result Cross-Chain ownership of EVM assets, such as Binance Smart Chain, Polygon, or Ethereum The ChainAuth APIs and SDKs are NOT currently recommended for writing transactions to the blockchain from your game. For such use cases, it is recommended to create your own dApp outside of the standalone game that players can interact with such as a NFT marketplace. More work & research is required to make the UX of the onboarding process as seamless as possible for new users, especially those who have never used the blockchain before.","title":"ChainAuth for Game Developers"},{"location":"docs/#chainauth-for-game-developers","text":"","title":"ChainAuth for Game Developers"},{"location":"docs/#what-is-chainauth","text":"ChainAuth provides a simplified solution to Game Developers for one of the many difficulties when developing a Web 3 standalone game : authenticating a player's non-custodial wallet to prove ownership of the tokens, NFTs, or other digital assets a player owns . Why is this a challenge? Players can own digital assets across a wide range of wallets (Metamask, Coinbase, Trust Wallet, etc.) on various different blockchains (ethereum, binance, polygon, etc.) and games should be flexible to support as many players as possible. One common workaround to this problem is to have the game (or typically a 3rd party service) manage the wallet on behalf of players, known as a custodial wallet. But this fundamentally looks no different from Web 2 and defeats the purpose of enabling players to have true ownership of their assets in the metaverse. The only secure way to prove that players own a given wallet is to ask them to sign a random message (nonce) with the wallet's private key and then cryptographically validate that the signature could only have been generated with the player's private key. However, without a backend solution, most wallets do not natively have a means to connect with other standalone applications. While some solutions exist if the game or app exists in a browser or for just mobile wallets using Wallet Connect, ChainAuth provides the APIs and SDKs necessary to validate your players' wallets whether they prefer using : - Mobile Wallet Apps i.e. Metamask Android or iOS - Web Browser Wallets i.e. Brave or Metamask - or Hardware Wallets i.e. Ledger or Trezor ChainAuth enables developers to either provide players a one time code for authentication or send them a magic link email to their players to start the authentication process. By going to https://link.fusedvr.com , players can input that code in the browser, which will request a signature from their web browser wallet, hardware wallet, or mobile wallet through Wallet Connect. Players will sign a randomly generated message (nonce), which is sent back to your game along with the validated wallet address. Once validated, you can now read the state of the blockchain to see what NFTs, tokens, and assets a player has on any chain associated with that address using the APIs provided.","title":"What is ChainAuth?"},{"location":"docs/#why-fusedvr-chainauth","text":"The ChainAuth solution by FusedVR is designed by a developers to make it incredibly simple for developers to solve the authentication problem either using the Unity SDK or via our API integration. For indie developers working in Unity, the SDK integration is as simple as : Add the Web3 SDK to your project via the Package Manager Call the Register Function with a unique identified and your application id to get a manager instance Give code from the Register Function to the player in order to input on https://link.fusedvr.com Call the Login function in the SDK with that code and await the player's authorization signature Web3Manager manager = await Web3Manager.Register(\"unique id\", \"appId\"); Debug.Log(manager.RegisterCode); //auth code for player to input Debug.Log( await manager.GetMagicLink() ); //link version of code if (await manager.AwaitLogin()) { //await for player to login //your game logic here CallAPIs(manager, Web3Manager.CHAIN.eth); }","title":"Why FusedVR ChainAuth"},{"location":"docs/#use-cases","text":"The ChainAuth solution provides an efficient solution for passwordless authentication of players, which enables use cases that require just reading the state of the blockchain once authenticated. Such use cases could include: Determining if a player owns digital assets associated with the game i.e. avatar skins, in game items, or tokens. Determining if a player owns an NFT the represents ownership of the game Whether or not a player has interacted with a custom smart contract and the events emitted as a result Cross-Chain ownership of EVM assets, such as Binance Smart Chain, Polygon, or Ethereum The ChainAuth APIs and SDKs are NOT currently recommended for writing transactions to the blockchain from your game. For such use cases, it is recommended to create your own dApp outside of the standalone game that players can interact with such as a NFT marketplace. More work & research is required to make the UX of the onboarding process as seamless as possible for new users, especially those who have never used the blockchain before.","title":"Use Cases"},{"location":"docs/contribution/","text":"Contribute to the Docs ChainAuth is a solution designed to help accelerate Web 3 in Gaming and the Metaverse and has really been built out as a passion project after listening to so many of you in the FusedVR community running into the issue of how to connect your amazing games to the blockchain. As a project forged from the ashes of developer pain points, we want to be able to document this solution and use cases to help future developers quickly bootstrap themselves into this space. And as the project continues to grow and expand, we will need help to make sure the documentation stays up to date and ensures a smooth experience for upcoming and exisiting developers. If you have suggestions for future documentation or see a bug in the exisiting documentation, please let us know either on Discord or even better if you can submit a Pull Request to the open source Github Repo for the documentation! https://github.com/FusedVR/chainauth-docs Join the Discord Community Importance of Documentation Documentation is maybe the most underappreciated but extremely vital resource for developers to efficiently use new tools, APIs, and SDKs. Documentation welcomes new developers and gets them up to speed. Documentation provides an easy access reference for exisiting developers to look up information. It is at the core of any software service and ChainAuth is no exception.","title":"Contribute to the Docs"},{"location":"docs/contribution/#contribute-to-the-docs","text":"ChainAuth is a solution designed to help accelerate Web 3 in Gaming and the Metaverse and has really been built out as a passion project after listening to so many of you in the FusedVR community running into the issue of how to connect your amazing games to the blockchain. As a project forged from the ashes of developer pain points, we want to be able to document this solution and use cases to help future developers quickly bootstrap themselves into this space. And as the project continues to grow and expand, we will need help to make sure the documentation stays up to date and ensures a smooth experience for upcoming and exisiting developers. If you have suggestions for future documentation or see a bug in the exisiting documentation, please let us know either on Discord or even better if you can submit a Pull Request to the open source Github Repo for the documentation! https://github.com/FusedVR/chainauth-docs Join the Discord Community","title":"Contribute to the Docs"},{"location":"docs/contribution/#importance-of-documentation","text":"Documentation is maybe the most underappreciated but extremely vital resource for developers to efficiently use new tools, APIs, and SDKs. Documentation welcomes new developers and gets them up to speed. Documentation provides an easy access reference for exisiting developers to look up information. It is at the core of any software service and ChainAuth is no exception.","title":"Importance of Documentation"},{"location":"docs/get-started/","text":"Getting Started The FusedVR ChainAuth APIs are designed to be as simple as possible to integrate into any game or application. First you will need an Application ID for your project. To create one, log into the Chain Auth console at https://console.fusedvr.com . To log in, you will need an email and a crypto wallet such as Metamask . Sign the message requested with your crypto wallet and then verify your e-mail address to contiue into the Console. Create Application Once logged into the console, you will need to create an application, which will need the following: Application Name Application Description Profile Image After you have created an application, you will see the application page, where you can update the data about the application and also get the application id. This is the ID you need to input into the SDK. Application ID Once you have an Application ID, you can start using either - The FusedVR Crypto APIs - The Unity SDK wrapper for making requests and authenticating players. For a guide on how to use the Unity SDK, please refer to the Hello World tutorial . For any support, ping @Fuseman in the FusedVR Discord in the #chainauth channel.","title":"Get Started"},{"location":"docs/get-started/#getting-started","text":"The FusedVR ChainAuth APIs are designed to be as simple as possible to integrate into any game or application. First you will need an Application ID for your project. To create one, log into the Chain Auth console at https://console.fusedvr.com . To log in, you will need an email and a crypto wallet such as Metamask . Sign the message requested with your crypto wallet and then verify your e-mail address to contiue into the Console.","title":"Getting Started"},{"location":"docs/get-started/#create-application","text":"Once logged into the console, you will need to create an application, which will need the following: Application Name Application Description Profile Image After you have created an application, you will see the application page, where you can update the data about the application and also get the application id. This is the ID you need to input into the SDK.","title":"Create Application"},{"location":"docs/get-started/#application-id","text":"Once you have an Application ID, you can start using either - The FusedVR Crypto APIs - The Unity SDK wrapper for making requests and authenticating players. For a guide on how to use the Unity SDK, please refer to the Hello World tutorial . For any support, ping @Fuseman in the FusedVR Discord in the #chainauth channel.","title":"Application ID"},{"location":"docs/tutorials/nftgame/","text":"Sell Your Game as an NFT In this guide, we will showcase an end to end open source project that demonstrates how your users can mint NFT tickets for your game or application and how that can be authenticated within Unity using the FusedVR Chain Auth Platform and SDK. This use case serves as a way to not only sell tickets to your game, but also give players control of owning your game, just like a physical game cartridge. The Unity project and front-end minting HTML code are both avaliable on Github in the master and gh-pages branches , respectively. Components Mint your own NFT HTML Page To try out the HTML page, first head over to https://fusedvr.github.io/chainauth-unity-game-nft/ , which is where the HTML client for minting a NFT is hosted. Currently, the demo is only working on the Polygon Mumbai Testnet network, but the Javascript code that controls this is located in gh-pages branch under assets/nfts/web3modal.js , where you can change the network. To do a test mint, you can create a Wallet and get some Mumbai Testnet Tokens on the faucet to test the minting page. It leverages the Web3 Modal open source project to allow wallets to connect via native integrations like Metamask or Wallet Connect. The HTML page is responsible for allowing you to mint your own custom NFT with its own unique ID. NFT Smart Contract The smart contract is an open sourced ERC-721 contract and avaliable on Github . It was built using the Open Zepplin Wizard , which enabled minting & burning of NFTs. You can use the same tool to create your own custom contract and then deploy it using a tool like Remix . Unity Project The Unity Project is located on the master branch and the main map generation is based on the project from Catlike Coding . The project utilizes the FusedVR Chain Auth solution in order to authenticate a player's wallet and confirm ownership of their assets. By logging into the service with their e-mail address, users are able to sign a confirmation message from the wallet of their choice, whether it is desktop or mobile. Then using the SDK, the game can see the list of NFTs owned by the player. With the list of NFTs owned by the player, we can generate the maps using the IDs as a random seed for generation. This ensures the maps that are generated are unique to the player's token id and can only be generated if a player owns the token. Putting it all Together Once you have minted a NFT on the demo site, you can use your wallet to authenticate against the Unity project and prove ownership of the NFT. To run the Unity Project, you will require an Application ID, which you can get by following the Getting Started Guide . You will then need to input the Application ID into the FusedAuth.cs script in the Login Function. The FusedAuth script is a Singleton class that manages the ChainAuthManager for the game between scenes. There are two scenes in the project: A Login Scene (called Start under /NFT Island/Scenes) and the Map Scene (called NFT Biomes under /NFT Island/Scenes) You can then run the project from the Start Scene, which will prompt you for an email address. Input your email, which will register your client with the Chain Auth backend to begin the validation. You should receive an email that contains a link that will re-direct to https://link.fusedvr.com . As a player, you would then receive a prompt to choose the wallet you would like to authenticate with. Once you choose the wallet, you will then receive a prompt to sign a random message, which by doing so will prove your ownership of the wallet and send that proof back to the game. Once successfully signed, you can head back to the game, which will now transition to the Map scene. Now that the player has fully authenticated, you can start querying the SDK for assets that are owned by the player. This occurs in the NFTGenerator.cs script, which checks for the list of NFT ids that the player owns. Each ID is used as a random seed to generate the map, thus providing a unique experience for players based on the assets they own. This same principle could be applied to checking whether or not a player owns a token that represents your game. Players can then select any of the IDs that they own to view the generated map. Using the dropdown, players can select any of the other NFTs that they own to view those assets as well.","title":"NFT Tickets for Games"},{"location":"docs/tutorials/nftgame/#sell-your-game-as-an-nft","text":"In this guide, we will showcase an end to end open source project that demonstrates how your users can mint NFT tickets for your game or application and how that can be authenticated within Unity using the FusedVR Chain Auth Platform and SDK. This use case serves as a way to not only sell tickets to your game, but also give players control of owning your game, just like a physical game cartridge. The Unity project and front-end minting HTML code are both avaliable on Github in the master and gh-pages branches , respectively.","title":"Sell Your Game as an NFT"},{"location":"docs/tutorials/nftgame/#components","text":"","title":"Components"},{"location":"docs/tutorials/nftgame/#mint-your-own-nft-html-page","text":"To try out the HTML page, first head over to https://fusedvr.github.io/chainauth-unity-game-nft/ , which is where the HTML client for minting a NFT is hosted. Currently, the demo is only working on the Polygon Mumbai Testnet network, but the Javascript code that controls this is located in gh-pages branch under assets/nfts/web3modal.js , where you can change the network. To do a test mint, you can create a Wallet and get some Mumbai Testnet Tokens on the faucet to test the minting page. It leverages the Web3 Modal open source project to allow wallets to connect via native integrations like Metamask or Wallet Connect. The HTML page is responsible for allowing you to mint your own custom NFT with its own unique ID.","title":"Mint your own NFT HTML Page"},{"location":"docs/tutorials/nftgame/#nft-smart-contract","text":"The smart contract is an open sourced ERC-721 contract and avaliable on Github . It was built using the Open Zepplin Wizard , which enabled minting & burning of NFTs. You can use the same tool to create your own custom contract and then deploy it using a tool like Remix .","title":"NFT Smart Contract"},{"location":"docs/tutorials/nftgame/#unity-project","text":"The Unity Project is located on the master branch and the main map generation is based on the project from Catlike Coding . The project utilizes the FusedVR Chain Auth solution in order to authenticate a player's wallet and confirm ownership of their assets. By logging into the service with their e-mail address, users are able to sign a confirmation message from the wallet of their choice, whether it is desktop or mobile. Then using the SDK, the game can see the list of NFTs owned by the player. With the list of NFTs owned by the player, we can generate the maps using the IDs as a random seed for generation. This ensures the maps that are generated are unique to the player's token id and can only be generated if a player owns the token.","title":"Unity Project"},{"location":"docs/tutorials/nftgame/#putting-it-all-together","text":"Once you have minted a NFT on the demo site, you can use your wallet to authenticate against the Unity project and prove ownership of the NFT. To run the Unity Project, you will require an Application ID, which you can get by following the Getting Started Guide . You will then need to input the Application ID into the FusedAuth.cs script in the Login Function. The FusedAuth script is a Singleton class that manages the ChainAuthManager for the game between scenes. There are two scenes in the project: A Login Scene (called Start under /NFT Island/Scenes) and the Map Scene (called NFT Biomes under /NFT Island/Scenes) You can then run the project from the Start Scene, which will prompt you for an email address. Input your email, which will register your client with the Chain Auth backend to begin the validation. You should receive an email that contains a link that will re-direct to https://link.fusedvr.com . As a player, you would then receive a prompt to choose the wallet you would like to authenticate with. Once you choose the wallet, you will then receive a prompt to sign a random message, which by doing so will prove your ownership of the wallet and send that proof back to the game. Once successfully signed, you can head back to the game, which will now transition to the Map scene. Now that the player has fully authenticated, you can start querying the SDK for assets that are owned by the player. This occurs in the NFTGenerator.cs script, which checks for the list of NFT ids that the player owns. Each ID is used as a random seed to generate the map, thus providing a unique experience for players based on the assets they own. This same principle could be applied to checking whether or not a player owns a token that represents your game. Players can then select any of the IDs that they own to view the generated map. Using the dropdown, players can select any of the other NFTs that they own to view those assets as well.","title":"Putting it all Together"},{"location":"docs/tutorials/unitysdk/","text":"Unity SDK Guide The FusedVR ChainAuth Unity SDK is designed to be as simple as possible to integrate into any game or application. The goal of the SDK is to enable you to authenticate your player's crypto wallets and enable them to prove ownership of their digital assets like tokens & NFTs. This guide will walk you through how to use the SDK to get access to the SDK, authenticate a player, and then verify the assets the player owns, which you can use however you like in the game. Setup SDK The ChainAuth Unity SDK is avaliable on Github as an open source project . To use the SDK, you will require an Application ID, which you can get by following the Getting Started Guide . Once you have an Application ID, you can import the Github repo into your repository as a Unity Package. In your Unity Project, open the Package Manager, which is under Window > Package Manager . Click the + icon and select Add package from git URL... This will prompt you to input a URL, in which you should paste the Git URL : https://github.com/FusedVR/chainauth-unity-sdk.git . Click Add , which begin the process of importing the SDK into your project. Once imported, in any script you plan to use the SDK, you will need to import the SDK namespace. using FusedVR.Crypto; Authenticating Players with their Wallet Once you have installed the SDK, you will need to integrate the Client Registration and Login Sequence into your game in order to authenticate players. The following code snippet shows an example of how you can authenticate players with just a few lines of code. In this section, we will walk through what each of these functions does in the authenticate process for players. ChainAuthManager manager = await ChainAuthManager.Register(\"unique id\", \"appId\"); //register the client with the APIs Debug.Log(manager.RegisterCode); //auth code for player to input into the link page received from Registration if (await manager.AwaitLogin()) { //await player login //your game logic here CallAPIs(manager, ChainAuthManager.CHAIN.eth); } Register and Get Registration Code The first step in using the SDK is Registering the Client. To do so, call the static function Register , which is responsible for calling the Register API for you. THe parameters that are required are a unique ID for this client and the Application ID from above. NOTE: if the unique ID is an email address, an email will automatically be sent to the player, which will allow them to click on the link and authenticate without the need for a code. ChainAuthManager manager = await ChainAuthManager.Register(\"unique id\", \"appId\"); //register the client with the APIs The SDK will return a ChainAuthManager Object, which will enable you to make all the required calls for other supported functionality below. This object will store the Registeration Code that is retured from calling the Register API. You will need to provide this code to the player on a GUI so that they can input the code into https://link.fusedvr.com manager.RegisterCode; //auth code for player to input into the link page received from Registration These codes are only valid for 10 minutes. If the code has become invalid, you may call the non-static Register function to re-register and get a valid code. string code = await manager.Register(); //re-register to get new auth code Magic Link Alternatively, if you would like to provide a clickable experience without a code, you call call the GetMagicLink function after Register. If the player is already logged in, magic link will throw an exception, which is recommended to catch. If the player is not logged in, this function will return a URL, which players can click on to start the authentication process to your application without having to enter a code. ChainAuthManager manager = await ChainAuthManager.Register(\"unique id\", \"appId\"); //register the client with the APIs try { string magicLink = await manager.GetMagicLink()); //gets the magic link for the player } catch (Exception e) { Debug.LogError(e); } Await Login Once you have registered the player and have provided them a means to start the authentication process (via email, code, or magic link), you then need to wait for them to authenticate their wallet. To await for the player to login, you can call the AwaitLogin function. bool success = await manager.AwaitLogin(); //awaits player login This will return once the login process is complete whether or not it was succesful, at which point you can start reading the state of their wallet. Verifying Player's Digital Assets on the Blockchain Authentication Token Once a player has logged in and authenticated your app, you will receive back a JWT token, which when decoded contains important information, such as the player's wallet address & the signature proof they used to authenticate. A valid token will enable you to call FusedVR APIs and read the state of the blockchain more easily. This token is saved in your Player Prefs, so that you can quickly login players between sessions without needing to re-authenticate each time. This requires the Unique ID you used to remain the same between sessions. You can get the Bearer Token at any time from a Logged In user through the ChainAuthManager and Decode it to see the contents of the token, which are stored as a key value pair in a dictionary. string token = manager.GetBearerToken(); //get token Dictionary<string, string> tokenContent = ChainAuthManager.DecodeJWT(token); //decode contents of the token as a key-value pair Player Address As mentioned above, the player's authenticated wallet address is stored within the authentication token. To make it easier to get the player's address, a wrapper function is provided. string address = manager.GetAddress(); //get the wallet address used for authentication Select Chain The FusedVR Crypto APIs support a subset of EVM compatiable blockchains & testnets, which stored in the CHAIN sub-class. When you call any of the following functions, you will be required to pass an instance of the CHAIN object, which will indicate which blockchain to query. Here are the currently supported chains: ChainAuthManager.CHAIN.eth ChainAuthManager.CHAIN.ropsten ChainAuthManager.CHAIN.rinkeby ChainAuthManager.CHAIN.goerli ChainAuthManager.CHAIN.polygon ChainAuthManager.CHAIN.mumbai ChainAuthManager.CHAIN.bsc ChainAuthManager.CHAIN.bsctestnet Get Native Balance Once a player is authenticated, you can pick any of the supported chains to retrive the native balance in the native currency of the player's wallet address. For example, on the ethereum blockchain, you would receive the balance of the player in Wei . string balance = await manager.GetNativeBalance(chain); Get ERC-20 Tokens Once a player is authenticated, you can get the full list of ERC-20 Tokens (or equivalent on other chains) that a player owns. The result is an array of all owned tokens and the attributes of each token. List<Dictionary<string, string>> erc20s = await manager.GetERC20Tokens(chain); In JSON format, here is an example of the returned attributes of each ERC-20 token { \"token_address\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", \"name\": \"Circle USDC\", \"symbol\": \"USDC\", \"logo\": \"ipfs://logo-url.png\", \"thumbnail\": \"ipfs://thumbnail-logo-url.png\", \"decimals\": 6, \"balance\": \"101\" } Get NFT Tokens Once a player is authenticated, you can get the full list of NFTs (ERC-721 or ERC-1155) that a player owns. The result is an array of all owned tokens and the attributes of each token. List<Dictionary<string, string>> nfts = await manager.GetNFTTokens(chain); { \"token_address\": \"0x4d66898952d879c27bdadb5876f38e38a083eff8\", \"token_id\": \"token1\", \"owner_of\": \"0x74bcd46288e661ecea04992d5e8fbe6c29cf6f64\", \"block_number\": \"27529244\", \"block_number_minted\": \"22171688\", \"amount\": \"1\", \"contract_type\": \"ERC1155\", \"name\": \"Axie\", \"symbol\": \"AXS\", \"token_uri\": \"https://raw.githubusercontent.com/FusedVR/nft.games/master/1/meta.json\", \"metadata\": { \"\\\\n \\\\\\\"name\\\\\\\"\": \"\\\\\\\"FusedVR Token\\\\\\\"\", \"\\\\n \\\\\\\"description\\\\\\\"\": \"\\\\\\\"This token is an example ERC-1155 asset that can be used to trigger streaming with FusedVR Render Streaming. In other words\", \"think of this as token representation of purchasing a game.\\\\\\\"\": null, \"\\\\n \\\\\\\"image\\\\\\\"\": \"\\\\\\\"https://raw.githubusercontent.com/FusedVR/nft.games/master/1/FusedVR.png\\\\\\\"\", \"\\\\n \\\\\\\"external_url\\\\\\\"\": \"\\\\\\\"https://fusedvr.com/rendering\\\\\\\"\\\\n\" } }","title":"Unity SDK Guide"},{"location":"docs/tutorials/unitysdk/#unity-sdk-guide","text":"The FusedVR ChainAuth Unity SDK is designed to be as simple as possible to integrate into any game or application. The goal of the SDK is to enable you to authenticate your player's crypto wallets and enable them to prove ownership of their digital assets like tokens & NFTs. This guide will walk you through how to use the SDK to get access to the SDK, authenticate a player, and then verify the assets the player owns, which you can use however you like in the game.","title":"Unity SDK Guide"},{"location":"docs/tutorials/unitysdk/#setup-sdk","text":"The ChainAuth Unity SDK is avaliable on Github as an open source project . To use the SDK, you will require an Application ID, which you can get by following the Getting Started Guide . Once you have an Application ID, you can import the Github repo into your repository as a Unity Package. In your Unity Project, open the Package Manager, which is under Window > Package Manager . Click the + icon and select Add package from git URL... This will prompt you to input a URL, in which you should paste the Git URL : https://github.com/FusedVR/chainauth-unity-sdk.git . Click Add , which begin the process of importing the SDK into your project. Once imported, in any script you plan to use the SDK, you will need to import the SDK namespace. using FusedVR.Crypto;","title":"Setup SDK"},{"location":"docs/tutorials/unitysdk/#authenticating-players-with-their-wallet","text":"Once you have installed the SDK, you will need to integrate the Client Registration and Login Sequence into your game in order to authenticate players. The following code snippet shows an example of how you can authenticate players with just a few lines of code. In this section, we will walk through what each of these functions does in the authenticate process for players. ChainAuthManager manager = await ChainAuthManager.Register(\"unique id\", \"appId\"); //register the client with the APIs Debug.Log(manager.RegisterCode); //auth code for player to input into the link page received from Registration if (await manager.AwaitLogin()) { //await player login //your game logic here CallAPIs(manager, ChainAuthManager.CHAIN.eth); }","title":"Authenticating Players with their Wallet"},{"location":"docs/tutorials/unitysdk/#register-and-get-registration-code","text":"The first step in using the SDK is Registering the Client. To do so, call the static function Register , which is responsible for calling the Register API for you. THe parameters that are required are a unique ID for this client and the Application ID from above. NOTE: if the unique ID is an email address, an email will automatically be sent to the player, which will allow them to click on the link and authenticate without the need for a code. ChainAuthManager manager = await ChainAuthManager.Register(\"unique id\", \"appId\"); //register the client with the APIs The SDK will return a ChainAuthManager Object, which will enable you to make all the required calls for other supported functionality below. This object will store the Registeration Code that is retured from calling the Register API. You will need to provide this code to the player on a GUI so that they can input the code into https://link.fusedvr.com manager.RegisterCode; //auth code for player to input into the link page received from Registration These codes are only valid for 10 minutes. If the code has become invalid, you may call the non-static Register function to re-register and get a valid code. string code = await manager.Register(); //re-register to get new auth code","title":"Register and Get Registration Code"},{"location":"docs/tutorials/unitysdk/#magic-link","text":"Alternatively, if you would like to provide a clickable experience without a code, you call call the GetMagicLink function after Register. If the player is already logged in, magic link will throw an exception, which is recommended to catch. If the player is not logged in, this function will return a URL, which players can click on to start the authentication process to your application without having to enter a code. ChainAuthManager manager = await ChainAuthManager.Register(\"unique id\", \"appId\"); //register the client with the APIs try { string magicLink = await manager.GetMagicLink()); //gets the magic link for the player } catch (Exception e) { Debug.LogError(e); }","title":"Magic Link"},{"location":"docs/tutorials/unitysdk/#await-login","text":"Once you have registered the player and have provided them a means to start the authentication process (via email, code, or magic link), you then need to wait for them to authenticate their wallet. To await for the player to login, you can call the AwaitLogin function. bool success = await manager.AwaitLogin(); //awaits player login This will return once the login process is complete whether or not it was succesful, at which point you can start reading the state of their wallet.","title":"Await Login"},{"location":"docs/tutorials/unitysdk/#verifying-players-digital-assets-on-the-blockchain","text":"","title":"Verifying Player's Digital Assets on the Blockchain"},{"location":"docs/tutorials/unitysdk/#authentication-token","text":"Once a player has logged in and authenticated your app, you will receive back a JWT token, which when decoded contains important information, such as the player's wallet address & the signature proof they used to authenticate. A valid token will enable you to call FusedVR APIs and read the state of the blockchain more easily. This token is saved in your Player Prefs, so that you can quickly login players between sessions without needing to re-authenticate each time. This requires the Unique ID you used to remain the same between sessions. You can get the Bearer Token at any time from a Logged In user through the ChainAuthManager and Decode it to see the contents of the token, which are stored as a key value pair in a dictionary. string token = manager.GetBearerToken(); //get token Dictionary<string, string> tokenContent = ChainAuthManager.DecodeJWT(token); //decode contents of the token as a key-value pair","title":"Authentication Token"},{"location":"docs/tutorials/unitysdk/#player-address","text":"As mentioned above, the player's authenticated wallet address is stored within the authentication token. To make it easier to get the player's address, a wrapper function is provided. string address = manager.GetAddress(); //get the wallet address used for authentication","title":"Player Address"},{"location":"docs/tutorials/unitysdk/#select-chain","text":"The FusedVR Crypto APIs support a subset of EVM compatiable blockchains & testnets, which stored in the CHAIN sub-class. When you call any of the following functions, you will be required to pass an instance of the CHAIN object, which will indicate which blockchain to query. Here are the currently supported chains: ChainAuthManager.CHAIN.eth ChainAuthManager.CHAIN.ropsten ChainAuthManager.CHAIN.rinkeby ChainAuthManager.CHAIN.goerli ChainAuthManager.CHAIN.polygon ChainAuthManager.CHAIN.mumbai ChainAuthManager.CHAIN.bsc ChainAuthManager.CHAIN.bsctestnet","title":"Select Chain"},{"location":"docs/tutorials/unitysdk/#get-native-balance","text":"Once a player is authenticated, you can pick any of the supported chains to retrive the native balance in the native currency of the player's wallet address. For example, on the ethereum blockchain, you would receive the balance of the player in Wei . string balance = await manager.GetNativeBalance(chain);","title":"Get Native Balance"},{"location":"docs/tutorials/unitysdk/#get-erc-20-tokens","text":"Once a player is authenticated, you can get the full list of ERC-20 Tokens (or equivalent on other chains) that a player owns. The result is an array of all owned tokens and the attributes of each token. List<Dictionary<string, string>> erc20s = await manager.GetERC20Tokens(chain); In JSON format, here is an example of the returned attributes of each ERC-20 token { \"token_address\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", \"name\": \"Circle USDC\", \"symbol\": \"USDC\", \"logo\": \"ipfs://logo-url.png\", \"thumbnail\": \"ipfs://thumbnail-logo-url.png\", \"decimals\": 6, \"balance\": \"101\" }","title":"Get ERC-20 Tokens"},{"location":"docs/tutorials/unitysdk/#get-nft-tokens","text":"Once a player is authenticated, you can get the full list of NFTs (ERC-721 or ERC-1155) that a player owns. The result is an array of all owned tokens and the attributes of each token. List<Dictionary<string, string>> nfts = await manager.GetNFTTokens(chain); { \"token_address\": \"0x4d66898952d879c27bdadb5876f38e38a083eff8\", \"token_id\": \"token1\", \"owner_of\": \"0x74bcd46288e661ecea04992d5e8fbe6c29cf6f64\", \"block_number\": \"27529244\", \"block_number_minted\": \"22171688\", \"amount\": \"1\", \"contract_type\": \"ERC1155\", \"name\": \"Axie\", \"symbol\": \"AXS\", \"token_uri\": \"https://raw.githubusercontent.com/FusedVR/nft.games/master/1/meta.json\", \"metadata\": { \"\\\\n \\\\\\\"name\\\\\\\"\": \"\\\\\\\"FusedVR Token\\\\\\\"\", \"\\\\n \\\\\\\"description\\\\\\\"\": \"\\\\\\\"This token is an example ERC-1155 asset that can be used to trigger streaming with FusedVR Render Streaming. In other words\", \"think of this as token representation of purchasing a game.\\\\\\\"\": null, \"\\\\n \\\\\\\"image\\\\\\\"\": \"\\\\\\\"https://raw.githubusercontent.com/FusedVR/nft.games/master/1/FusedVR.png\\\\\\\"\", \"\\\\n \\\\\\\"external_url\\\\\\\"\": \"\\\\\\\"https://fusedvr.com/rendering\\\\\\\"\\\\n\" } }","title":"Get NFT Tokens"}]}