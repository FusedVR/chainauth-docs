{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"docs/","text":"ChainAuth for Game Developers What is ChainAuth? ChainAuth provides a solution to one of the many difficulties when developing a Web 3 standalone game : authenticating a player's non-custodial wallet to validate the tokens, NFTs, or other digital assets a player owns . The most secure way to prove that players own a given wallet is to ask them to sign a random message (nonce) with the wallet's private key and then cryptographically validate that the signature could only have been generated with the player's private key. However, without a backend solution, most wallets do not natively have a means to connect to with other standalone applications. While some solutions exist if the game or app exists in a browser or for just mobile wallets using Wallet Connect, ChainAuth provides the APIs and SDKs neccesary to validate your players' wallets whether they prefer using : - Mobile Wallet Apps i.e. Metamask Android or iOS - Web Browser Wallets i.e. Brave or Metamask - or Hardware Wallets i.e. Ledger or Trezor ChainAuth enables developers to send a magic email to their players, which if opened from a mobile wallet will re-direct to the player's wallet for a signature. And if opened from the browser, it will request the signature from the web browser wallet / hardware wallet. Once a player signs the random nonce, a message is sent back to your game with the validated wallet address. Once validated, you can now read the state of the blockchain to see what NFTs, tokens, and assets a player has on-chain. Why FusedVR ChainAuth The ChainAuth solution by FusedVR makes it incredibly simple for developers to solve the authentication problem either using the Unity SDK or via our API integration. For indie developers working in Unity, the SDK integration is really as simple as : Add the Web3 SDK to your project via the Package Manager Get the e-mail address of your player Call the login function in the SDK to send an email to the player and await their signature bool isLoggedIn = await Web3Manager.Login(\"email\", \"appId\"); Use Cases The ChainAuth solution provides an efficient solution for passwordless authentication of players, which enables use cases that require just reading the state of the blockchain once authenticated. Such use cases could include: Determining if a player owns digital assets associated with the game i.e. avatar skins, in game items, or tokens. Determining if a player owns an NFT the represents ownership of the game Whether or not a player has interacted with a custom smart contract and the events emitted as a result Cross-Chain ownership of EVM assets, such as Binance Smart Chain, Polygon, or Ethereum The ChainAuth APIs and SDKs are NOT currently recommended for writing transactions to the blockchain from your game. For such use cases, it is recommended to create your own dApp outside of the standalone game that players can interact with such as a NFT marketplace. More work & research is required to make the UX of the onboarding process as seamless as possible for new users, especially those who have never used the blockchain before.","title":"ChainAuth for Game Developers"},{"location":"docs/#chainauth-for-game-developers","text":"","title":"ChainAuth for Game Developers"},{"location":"docs/#what-is-chainauth","text":"ChainAuth provides a solution to one of the many difficulties when developing a Web 3 standalone game : authenticating a player's non-custodial wallet to validate the tokens, NFTs, or other digital assets a player owns . The most secure way to prove that players own a given wallet is to ask them to sign a random message (nonce) with the wallet's private key and then cryptographically validate that the signature could only have been generated with the player's private key. However, without a backend solution, most wallets do not natively have a means to connect to with other standalone applications. While some solutions exist if the game or app exists in a browser or for just mobile wallets using Wallet Connect, ChainAuth provides the APIs and SDKs neccesary to validate your players' wallets whether they prefer using : - Mobile Wallet Apps i.e. Metamask Android or iOS - Web Browser Wallets i.e. Brave or Metamask - or Hardware Wallets i.e. Ledger or Trezor ChainAuth enables developers to send a magic email to their players, which if opened from a mobile wallet will re-direct to the player's wallet for a signature. And if opened from the browser, it will request the signature from the web browser wallet / hardware wallet. Once a player signs the random nonce, a message is sent back to your game with the validated wallet address. Once validated, you can now read the state of the blockchain to see what NFTs, tokens, and assets a player has on-chain.","title":"What is ChainAuth?"},{"location":"docs/#why-fusedvr-chainauth","text":"The ChainAuth solution by FusedVR makes it incredibly simple for developers to solve the authentication problem either using the Unity SDK or via our API integration. For indie developers working in Unity, the SDK integration is really as simple as : Add the Web3 SDK to your project via the Package Manager Get the e-mail address of your player Call the login function in the SDK to send an email to the player and await their signature bool isLoggedIn = await Web3Manager.Login(\"email\", \"appId\");","title":"Why FusedVR ChainAuth"},{"location":"docs/#use-cases","text":"The ChainAuth solution provides an efficient solution for passwordless authentication of players, which enables use cases that require just reading the state of the blockchain once authenticated. Such use cases could include: Determining if a player owns digital assets associated with the game i.e. avatar skins, in game items, or tokens. Determining if a player owns an NFT the represents ownership of the game Whether or not a player has interacted with a custom smart contract and the events emitted as a result Cross-Chain ownership of EVM assets, such as Binance Smart Chain, Polygon, or Ethereum The ChainAuth APIs and SDKs are NOT currently recommended for writing transactions to the blockchain from your game. For such use cases, it is recommended to create your own dApp outside of the standalone game that players can interact with such as a NFT marketplace. More work & research is required to make the UX of the onboarding process as seamless as possible for new users, especially those who have never used the blockchain before.","title":"Use Cases"},{"location":"docs/get-started/","text":"Hello World - Unity The FusedVR ChainAuth APIs are designed to be as simple as possible to integrate into any game or application. Below is a short video documenting the process of integrating the SDK into a brand new Unity project, at which point you can check to see what NFTs the player owns.","title":"Hello World - Unity"},{"location":"docs/get-started/#hello-world-unity","text":"The FusedVR ChainAuth APIs are designed to be as simple as possible to integrate into any game or application. Below is a short video documenting the process of integrating the SDK into a brand new Unity project, at which point you can check to see what NFTs the player owns.","title":"Hello World - Unity"},{"location":"docs/get-started/api/","text":"FusedVR Crypto APIs To view the current APIs, please refer to https://crypto.fusedvr.com .","title":"FusedVR Crypto APIs"},{"location":"docs/get-started/api/#fusedvr-crypto-apis","text":"","title":"FusedVR Crypto APIs"},{"location":"docs/get-started/api/#to-view-the-current-apis-please-refer-to-httpscryptofusedvrcom","text":"","title":"To view the current APIs, please refer to https://crypto.fusedvr.com."},{"location":"docs/get-started/apps/","text":"Application Management Through the ChainAuth Console, you will be able to create, manage, and monitor the usage of the ChainAuth SDK or APIs for your game or application. Simply log-in into the console with an e-mail address and a Web 3 wallet to get started. Create App To start using the APIs and SDKs, you will need to create an application to receive an App ID, which can be used for the login function. bool isLoggedIn = await Web3Manager.Login(\"email\", \"appId\"); Creating an application just requires an App Image and App Name , which will be used to customize the login authentication email that is sent out to your players. Billing As a platform designed for Web 3 Game Developers, payments and billing for the service are managed in a Web 3 native way powered by Cask.fi . Cask Fi is a blockchain subscription payments service that will allow you to pay for access to the FusedVR APIs on a monthly cadence on the Polygon network with different US backed stablecoins. Because Cask Fi handles the payments, you will need to interact with their service to top off your funds to continue paying for FusedVR ChainAuth if you run out of funds in their wallet. Monitoring Once you roll your game into production, you will want to monitor how your application is being used and see if you are approaching any limits. By clicking on an application from the dashboard, you will be able to view the application stats and edit your application as needed.","title":"Application Management"},{"location":"docs/get-started/apps/#application-management","text":"Through the ChainAuth Console, you will be able to create, manage, and monitor the usage of the ChainAuth SDK or APIs for your game or application. Simply log-in into the console with an e-mail address and a Web 3 wallet to get started.","title":"Application Management"},{"location":"docs/get-started/apps/#create-app","text":"To start using the APIs and SDKs, you will need to create an application to receive an App ID, which can be used for the login function. bool isLoggedIn = await Web3Manager.Login(\"email\", \"appId\"); Creating an application just requires an App Image and App Name , which will be used to customize the login authentication email that is sent out to your players.","title":"Create App"},{"location":"docs/get-started/apps/#billing","text":"As a platform designed for Web 3 Game Developers, payments and billing for the service are managed in a Web 3 native way powered by Cask.fi . Cask Fi is a blockchain subscription payments service that will allow you to pay for access to the FusedVR APIs on a monthly cadence on the Polygon network with different US backed stablecoins. Because Cask Fi handles the payments, you will need to interact with their service to top off your funds to continue paying for FusedVR ChainAuth if you run out of funds in their wallet.","title":"Billing"},{"location":"docs/get-started/apps/#monitoring","text":"Once you roll your game into production, you will want to monitor how your application is being used and see if you are approaching any limits. By clicking on an application from the dashboard, you will be able to view the application stats and edit your application as needed.","title":"Monitoring"},{"location":"docs/intro/contribute/","text":"Contribute to the Docs ChainAuth is a solution designed to help accelerate Web 3 in Gaming and the Metaverse and has really been built out as a passion project after listening to so many of you in the FusedVR community running into the issue of how to connect your amazing games to the blockchain. As a project forged from the ashes of developer pain points, we want to be able to document this solution and use cases to help future developers quickly bootstrap themselves into this space. And as the project continues to grow and expand, we will need help to make sure the documentation stays up to date and ensures a smooth experience for upcoming and exisiting developers. If you have suggestions for future documentation or see a bug in the exisiting documentation, please let us know either on Discord or even better if you can submit a Pull Request to the open source Github Repo for the documentation! https://github.com/FusedVR/gamefi-docs/ Join the Discord Community Importance of Documentation Documentation is maybe the most underappreciated but extremely vital resource for developers to efficiently use new tools, APIs, and SDKs. Documentation welcomes new developers and gets them up to speed. Documentation provides an easy access reference for exisiting developers to look up information. It is at the core of any software service and ChainAuth is no exception.","title":"Contribute to the Docs"},{"location":"docs/intro/contribute/#contribute-to-the-docs","text":"ChainAuth is a solution designed to help accelerate Web 3 in Gaming and the Metaverse and has really been built out as a passion project after listening to so many of you in the FusedVR community running into the issue of how to connect your amazing games to the blockchain. As a project forged from the ashes of developer pain points, we want to be able to document this solution and use cases to help future developers quickly bootstrap themselves into this space. And as the project continues to grow and expand, we will need help to make sure the documentation stays up to date and ensures a smooth experience for upcoming and exisiting developers. If you have suggestions for future documentation or see a bug in the exisiting documentation, please let us know either on Discord or even better if you can submit a Pull Request to the open source Github Repo for the documentation! https://github.com/FusedVR/gamefi-docs/ Join the Discord Community","title":"Contribute to the Docs"},{"location":"docs/intro/contribute/#importance-of-documentation","text":"Documentation is maybe the most underappreciated but extremely vital resource for developers to efficiently use new tools, APIs, and SDKs. Documentation welcomes new developers and gets them up to speed. Documentation provides an easy access reference for exisiting developers to look up information. It is at the core of any software service and ChainAuth is no exception.","title":"Importance of Documentation"},{"location":"docs/tutorials/magiclink/","text":"Magic Link Coming Soon!","title":"Magic Link"},{"location":"docs/tutorials/magiclink/#magic-link","text":"Coming Soon!","title":"Magic Link"},{"location":"docs/tutorials/nftgame/","text":"Sell Your Game as an NFT In this guide, we will showcase an end to end open source project that demonstrates how your users can mint NFT tickets for your game or application and how that can be authenticated within Unity using the FusedVR Chain Auth Platform and SDK. This use case serves as a way to not only sell tickets to your game, but also give players control of owning your game, just like a physical game cartridge. The Unity project and front-end minting HTML code are both avaliable on Github in the master and gh-pages branches , respectively. Components Mint your own NFT HTML Page To try out the HTML page, first head over to https://fusedvr.github.io/chainauth-unity , which is where the HTML client for minting a NFT is hosted. Currently, the demo is only working on the Polygon Mumbai Testnet network, but the Javascript code that controls this is located in gh-pages branch under assets/nfts/web3modal.js , where you can change the network. It leverages the Web3 Modal open source project to allow wallets to connect via native integrations like Metamask or Wallet Connect. The HTML page is responsible for allowing you to mint your own custom NFT with its own unique ID. NFT Smart Contract The smart contract is an open sourced ERC-721 contract and avaliable on Github . It was built using the Open Zepplin Wizard , which enabled minting & burning of NFTs. You can use the same tool to create your own custom contract and then deploy it using a tool like Remix . Unity Project The Unity Project is located on the master branch and the main map generation is based on the project from Catlike Coding . The project utilizes the FusedVR Chain Auth solution in order to authenticate a player's wallet and confirm ownership of their assets. By logging into the service with their e-mail address, users are able to sign a confirmation message from the wallet of their choice, whether it is desktop or mobile. Then using the SDK, the game can see the list of NFTs owned by the player. With the list of NFTs owned by the player, we can generate the maps using the IDs as a random seed for generation. This ensures the maps that are generated are unique to the player's token id and can only be generated if a player owns the token. Putting it all Together Coming soon!","title":"Sell Your Game as an NFT"},{"location":"docs/tutorials/nftgame/#sell-your-game-as-an-nft","text":"In this guide, we will showcase an end to end open source project that demonstrates how your users can mint NFT tickets for your game or application and how that can be authenticated within Unity using the FusedVR Chain Auth Platform and SDK. This use case serves as a way to not only sell tickets to your game, but also give players control of owning your game, just like a physical game cartridge. The Unity project and front-end minting HTML code are both avaliable on Github in the master and gh-pages branches , respectively.","title":"Sell Your Game as an NFT"},{"location":"docs/tutorials/nftgame/#components","text":"","title":"Components"},{"location":"docs/tutorials/nftgame/#mint-your-own-nft-html-page","text":"To try out the HTML page, first head over to https://fusedvr.github.io/chainauth-unity , which is where the HTML client for minting a NFT is hosted. Currently, the demo is only working on the Polygon Mumbai Testnet network, but the Javascript code that controls this is located in gh-pages branch under assets/nfts/web3modal.js , where you can change the network. It leverages the Web3 Modal open source project to allow wallets to connect via native integrations like Metamask or Wallet Connect. The HTML page is responsible for allowing you to mint your own custom NFT with its own unique ID.","title":"Mint your own NFT HTML Page"},{"location":"docs/tutorials/nftgame/#nft-smart-contract","text":"The smart contract is an open sourced ERC-721 contract and avaliable on Github . It was built using the Open Zepplin Wizard , which enabled minting & burning of NFTs. You can use the same tool to create your own custom contract and then deploy it using a tool like Remix .","title":"NFT Smart Contract"},{"location":"docs/tutorials/nftgame/#unity-project","text":"The Unity Project is located on the master branch and the main map generation is based on the project from Catlike Coding . The project utilizes the FusedVR Chain Auth solution in order to authenticate a player's wallet and confirm ownership of their assets. By logging into the service with their e-mail address, users are able to sign a confirmation message from the wallet of their choice, whether it is desktop or mobile. Then using the SDK, the game can see the list of NFTs owned by the player. With the list of NFTs owned by the player, we can generate the maps using the IDs as a random seed for generation. This ensures the maps that are generated are unique to the player's token id and can only be generated if a player owns the token.","title":"Unity Project"},{"location":"docs/tutorials/nftgame/#putting-it-all-together","text":"Coming soon!","title":"Putting it all Together"}]}